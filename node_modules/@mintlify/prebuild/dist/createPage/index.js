import { slugToTitle } from '@mintlify/common';
import matter from 'gray-matter';
import { getLocationErrString } from '../errorMessages/getLocationErrString.js';
import { removeLeadingSlash } from '../fs/removeLeadingSlash.js';
import { optionallyAddLeadingSlash } from '../generate.js';
import { getOpenApiTitleAndDescription } from './getOpenApiTitleAndDescription.js';
import { preparseMdx } from './preparseMdx/index.js';
export const createPage = async (pagePath, pageContent, contentDirectoryPath, openApiFiles, suppressErrLog = false) => {
    let metadata = {};
    try {
        const { data } = matter(pageContent);
        metadata = data;
        pageContent = await preparseMdx(pageContent, contentDirectoryPath, pagePath, suppressErrLog);
    }
    catch (err) {
        console.log(`\n ⚠️  Parsing error in the frontmatter: ${getLocationErrString(pagePath, contentDirectoryPath, err)}: `);
        // TODO - pages completely break in our backend when frontmatter is broken.
        // Unify "createPage" function across applications and properly catch errors
        throw err;
    }
    // Replace .mdx so we can pass file paths into this function
    const slug = pagePath.replace(/\.mdx?$/, '');
    let defaultTitle = slugToTitle(slug);
    let description;
    // Append data from OpenAPI if it exists
    if (metadata.openapi) {
        const { title, description: openApiDescription } = getOpenApiTitleAndDescription(openApiFiles, metadata.openapi);
        if (title) {
            defaultTitle = title;
        }
        if (openApiDescription) {
            description = openApiDescription;
        }
    }
    const pageMetadata = {
        title: defaultTitle,
        description,
        ...metadata,
        href: optionallyAddLeadingSlash(slug),
    };
    return {
        pageMetadata,
        pageContent,
        slug: removeLeadingSlash(slug),
    };
};
